package com.mohdeva.learn.tasker;import android.app.AlertDialog;import android.app.WallpaperManager;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.PackageManager;import android.content.res.Configuration;import android.graphics.drawable.Drawable;import android.os.Build;import android.os.Bundle;import android.support.v4.app.ActivityCompat;import android.support.v4.content.ContextCompat;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.widget.Button;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import android.os.Vibrator;import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import static android.Manifest.permission.ACCESS_COARSE_LOCATION;import static android.Manifest.permission.ACCESS_FINE_LOCATION;import static android.Manifest.permission.CALL_PHONE;import static android.Manifest.permission.INTERNET;import static android.Manifest.permission.READ_CONTACTS;import static android.Manifest.permission.SEND_SMS;public class MainActivity extends AppCompatActivity implements View.OnClickListener {    private static final int PERMISSION_REQUEST_CODE = 600;    private Button b1, b2, b3, b4;    private StringBuilder curPattern = new StringBuilder(100);    private String savPattern = new String();    private String textFromFileString;    private int countKnock = 0;    private int count=0;    private static final String TAG = MainActivity.class.getName();    private static final String FILENAME = "pat.txt";    private TextView err;    private Intent i, j,k;    Vibrator vibrator;    int flag=0;    private RelativeLayout layout;    //First Run ?    final String PREFS_NAME = "TaskerFirstRun";    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        requestWindowFeature(Window.FEATURE_NO_TITLE);        //Hiding Action Bar        getSupportActionBar().hide();        //displays the content in full screen mode        this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,                WindowManager.LayoutParams.FLAG_FULLSCREEN);        //int flag, int mask        setContentView(R.layout.lock);        //Check First Time Run        SharedPreferences settings = getSharedPreferences(PREFS_NAME, 0);        if (settings.getBoolean("Tasker_first_time", true)) {            // record the fact that the app has been started at least once            settings.edit().putBoolean("Tasker_first_time", false).commit();            k = new Intent(this,IntroActivity.class);            startActivity(k);            finish();        }        else{            flag=1;        }        checkPermission();        requestPermission();        err = (TextView) findViewById(R.id.error);        vibrator = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);        //Problem when using landscape        if(getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT){            // Changing Background Color for Lock            layout =(RelativeLayout)findViewById(R.id.Back);            final WallpaperManager wallpaperManager = WallpaperManager.getInstance(this);            final Drawable wallpaperDrawable = wallpaperManager.getDrawable();            final int sdk = android.os.Build.VERSION.SDK_INT;            if(sdk < android.os.Build.VERSION_CODES.JELLY_BEAN) {                layout.setBackgroundDrawable(wallpaperDrawable);            } else {                layout.setBackground(wallpaperDrawable);            }        }        //get password from file        textFromFileString = readFromFile();        count=textFromFileString.length();        if(count==0 && flag==1){            Intent i = new Intent(MainActivity.this, Todo.class);            startActivity(i);            finish();        }        b1 = (Button) findViewById(R.id.one);        b2 = (Button) findViewById(R.id.two);        b3 = (Button) findViewById(R.id.three);        b4 = (Button) findViewById(R.id.four);        b1.setOnClickListener(this);        b2.setOnClickListener(this);        b3.setOnClickListener(this);        b4.setOnClickListener(this);        //starting service        //ServiceStart();    }    public void onClick(View v) {        switch (v.getId()) {            case R.id.one:            {                curPattern.append("1");                countKnock++;                if (countKnock == count){                    if (curPattern.toString().equals(textFromFileString)) {                        Intent i = new Intent(MainActivity.this, Todo.class);                        startActivity(i);                        finish();                    } else {                        err.setText("Wrong Password");                        countKnock = countKnock % count;                        curPattern.setLength(0);                        vibrator.vibrate(400);                    }                }                break;            }            case R.id.two:            {                curPattern.append("2");                countKnock++;                if (countKnock == count){                    if (curPattern.toString().equals(textFromFileString)) {                        Intent i = new Intent(MainActivity.this, Todo.class);                        startActivity(i);                        finish();                    } else {                        err.setText("Wrong Password");                        countKnock = countKnock % count;                        curPattern.setLength(0);                        vibrator.vibrate(400);                    }                }                break;            }            case R.id.three:            {                curPattern.append("3");                countKnock++;                if (countKnock == count){                    if (curPattern.toString().equals(textFromFileString)) {                        Intent i = new Intent(MainActivity.this, Todo.class);                        startActivity(i);                        finish();                    } else {                        err.setText("Wrong Password");                        countKnock = countKnock % count;                        curPattern.setLength(0);                        vibrator.vibrate(400);                    }                }                break;            }            case R.id.four:            {                curPattern.append("4");                countKnock++;                if (countKnock == count){                    if (curPattern.toString().equals(textFromFileString)) {                        Intent i = new Intent(MainActivity.this, Todo.class);                        startActivity(i);                        finish();                    } else {                        err.setText("Wrong Password");                        countKnock = countKnock % count;                        curPattern.setLength(0);                        vibrator.vibrate(400);                    }                }                break;            }        }    }    /*    private void writeToFile(String data) {        try {            OutputStreamWriter outputStreamWriter = new OutputStreamWriter(openFileOutput(FILENAME, Context.MODE_PRIVATE));            outputStreamWriter.write(data);            outputStreamWriter.close();        } catch (IOException e) {            Log.e(TAG, "File write failed: " + e.toString());        }    }*/    private String readFromFile() {        String ret = "";        try {            InputStream inputStream = openFileInput(FILENAME);            if (inputStream != null) {                InputStreamReader inputStreamReader = new InputStreamReader(inputStream);                BufferedReader bufferedReader = new BufferedReader(inputStreamReader);                String receiveString = "";                StringBuilder stringBuilder = new StringBuilder();                while ((receiveString = bufferedReader.readLine()) != null) {                    stringBuilder.append(receiveString);                }                inputStream.close();                ret = stringBuilder.toString();            }        } catch (FileNotFoundException e) {            Log.e(TAG, "File not found: " + e.toString());        } catch (IOException e) {            Log.e(TAG, "Can not read file: " + e.toString());        }        return ret;    }    //Starting Service    public void ServiceStart() {//        Toast.makeText(this, "Service Initiated", Toast.LENGTH_SHORT).show();        Intent j = new Intent(this, MyService.class);        startService(j);    }    private boolean checkPermission() {        int result = ContextCompat.checkSelfPermission(getApplicationContext(), ACCESS_FINE_LOCATION);        int result1 = ContextCompat.checkSelfPermission(getApplicationContext(), READ_CONTACTS);        int result2 = ContextCompat.checkSelfPermission(getApplicationContext(), ACCESS_COARSE_LOCATION);        int result3 = ContextCompat.checkSelfPermission(getApplicationContext(), SEND_SMS);        int result4 = ContextCompat.checkSelfPermission(getApplicationContext(), INTERNET);        return result == PackageManager.PERMISSION_GRANTED && result1 == PackageManager.PERMISSION_GRANTED&& result2 == PackageManager.PERMISSION_GRANTED&& result3 == PackageManager.PERMISSION_GRANTED&& result4 == PackageManager.PERMISSION_GRANTED;    }    private void requestPermission() {        ActivityCompat.requestPermissions(this, new String[]{ACCESS_FINE_LOCATION, READ_CONTACTS,ACCESS_COARSE_LOCATION,INTERNET,SEND_SMS,CALL_PHONE}, PERMISSION_REQUEST_CODE);    }    @Override    public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {        switch (requestCode) {            case PERMISSION_REQUEST_CODE:                if (grantResults.length > 0) {                    boolean locationAccepted = grantResults[0] == PackageManager.PERMISSION_GRANTED;                    boolean cameraAccepted = grantResults[1] == PackageManager.PERMISSION_GRANTED;                    if (locationAccepted && cameraAccepted) {                        //Toast.makeText(MainActivity.this, "Grant The Next Permission", Toast.LENGTH_SHORT).show();                    }                    else {                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                            if (shouldShowRequestPermissionRationale(ACCESS_FINE_LOCATION)) {                                showMessageOKCancel("You need to allow access to both the permissions",                                        new DialogInterface.OnClickListener() {                                            @Override                                            public void onClick(DialogInterface dialog, int which) {                                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                                    requestPermissions(new String[]{ACCESS_FINE_LOCATION, READ_CONTACTS,ACCESS_COARSE_LOCATION,INTERNET,SEND_SMS,CALL_PHONE},                                                            PERMISSION_REQUEST_CODE);                                                }                                            }                                        });                                return;                            }                        }                    }                }                break;        }    }    private void showMessageOKCancel(String message, DialogInterface.OnClickListener okListener) {        new AlertDialog.Builder(MainActivity.this)                .setMessage(message)                .setPositiveButton("OK", okListener)                .setNegativeButton("Cancel", null)                .create()                .show();    }}